Help output
planck 1.4
Usage:  planck [init-opt*] [main-opt] [args]

  With no options or args, runs an interactive Read-Eval-Print Loop

  init options:
    -i, --init path     Load a file or resource
    -e, --eval string   Evaluate expressions in string; print non-nil values
    -s, --src  path     Use path for source. Default is "src"
    -v, --verbose       Emit verbose diagnostic output.

  main options:
    -m, --main ns-name  Call the -main function from a namespace with args
    -r, --repl          Run a repl
    path                Run a script from a file or resource
    -                   Run a script from standard input
    -h, -?, --help      Print this help message and exit

  operation:

    - Enters the cljs.user namespace
    - Binds *command-line-args* to a seq of strings containing command line
      args that appear after any main option
    - Runs all init options in order
    - Calls a -main function or runs a repl or script if requested

  The init options may be repeated and mixed freely, but must appear before
  any main option.

  Paths may be absolute or relative in the filesystem.
Repeated ordered -e and -i, supressing nil
foo
:a
bar
2
foo
Test :cljs/quit
1
Test print to stderr
nil
Test require REPL special
nil
true
Test require-macros REPL special
nil
5
Test in-ns REPL special
nil
:foo.bar/a
Test doc REPL special
-------------------------
cljs.core/cljs.core/inc
([x])
  Returns a number one greater than num.
nil
-------------------------
doc
([name])
REPL Special Function
  Prints documentation for a var or special form given its name
nil
#'cljs.user/f
-------------------------
cljs.user/cljs.user/f
([param])
  docstring
nil
Test pst REPL special
#'cljs.user/f
#'cljs.user/g
whoah

whoah

nil
#'cljs.user/e
ouch

ouch

nil
whoah

nil
Spit / slurp
#'cljs.user/test-file
nil
#'cljs.user/test-spit-slurp
true
nil
true
nil
true
nil
true
nil
true
nil
Shell
nil
Coercions
nil
nil
nil
#planck.io.File{:path "abc"}
#planck.io.File{:path "abc"}
"abc"
reader and read-line
nil
nil
#'planck.io/test-read
nil
nil
nil
nil
"a"
nil
nil
nil
"a"
nil
nil
nil
"a"
nil
nil
nil
"a"
"b"
nil
nil
"a"
"b"
nil
nil
writer
nil
nil
#'planck.io/test-write
true
true
true
true
true
true
writer append
nil
nil
#'planck.io/test-write
true
true
true
true
true
true
true
true
true
true
true
true
true
true
true
true
true
true
