Help output
planck 1.4
Usage:  planck [init-opt*] [main-opt] [args]

  With no options or args, runs an interactive Read-Eval-Print Loop

  init options:
    -i, --init path     Load a file or resource
    -e, --eval string   Evaluate expressions in string; print non-nil values
    -s, --src  path     Use path for source. Default is "src"
    -v, --verbose       Emit verbose diagnostic output.

  main options:
    -m, --main ns-name  Call the -main function from a namespace with args
    -r, --repl          Run a repl
    path                Run a script from a file or resource
    -                   Run a script from standard input
    -h, -?, --help      Print this help message and exit

  operation:

    - Enters the cljs.user namespace
    - Binds *command-line-args* to a seq of strings containing command line
      args that appear after any main option
    - Runs all init options in order
    - Calls a -main function or runs a repl or script if requested

  The init options may be repeated and mixed freely, but must appear before
  any main option.

  Paths may be absolute or relative in the filesystem.
Repeated ordered -e and -i, supressing nil
foo
:a
bar
2
foo
Test :cljs/quit
1
Test cope with syntax errors
Invalid number format [34f]

Invalid token: a:

Multi-line data
[1 2]
Multi-line string
"abc\ndef"
space before and after
3
Test print to stderr
nil
Test main
5
Test require REPL special
nil
true
Test require unknown ns
No such namespace: unknown_ns.core, could not locate unknown_ns/core.cljs, unknown_ns/core.cljc, or Closure namespace "unknown_ns.core"
nil
Test require :reload
nil
nil
nil
:initial
nil
nil
:reloaded
Test require :reload in changing spec
nil
nil
nil
:initial
nil
nil
:reloaded
Test require :reload-all
nil
nil
nil
:initial
nil
nil
:reloaded
Test require-macros unknown ns
No such namespace: unknown-ns.core, could not locate unknown_ns/core.cljs, unknown_ns/core.cljc, or Closure namespace "unknown-ns.core"
nil
Test require-macros REPL special
nil
5
Test in-ns REPL special
nil
:foo.bar/a
Test doc REPL special
-------------------------
cljs.core/inc
([x])
  Returns a number one greater than num.
nil
-------------------------
doc
([name])
REPL Special Function
  Prints documentation for a var or special form given its name
nil
#'cljs.user/f
-------------------------
cljs.user/f
([param])
  docstring
nil
Test pst REPL special
#'cljs.user/f
#'cljs.user/g
whoah

whoah

nil
#'cljs.user/e
ouch

ouch

nil
whoah

nil
Test load-file REPL special
nil
true
Test doc support for load-file REPL special
-------------------------
load-file
([filename])
REPL Special Function
  Loads a file
nil
Test load-file REPL bad filename
Could not load file int-test/src/test_load_file/nofile.cljs
nil
Test load-file REPL error in file
undefined is not an object (evaluating 'test_load_file.error_in_file.invalid.call')
nil
Spit / slurp
#'cljs.user/test-file
nil
#'cljs.user/test-spit-slurp
true
nil
true
nil
true
nil
true
nil
true
nil
Shell
nil
Coercions
nil
nil
nil
#planck.io.File{:path "abc"}
#planck.io.File{:path "abc"}
"abc"
reader and read-line
nil
#'cljs.user/test-read
nil
nil
nil
nil
"a"
nil
nil
nil
"a"
nil
nil
nil
"a"
nil
nil
nil
"a"
"b"
nil
nil
"a"
"b"
nil
nil
writer
nil
#'cljs.user/test-write
true
true
true
true
true
true
writer append
nil
#'cljs.user/test-write
true
true
true
true
true
true
true
true
true
true
true
true
true
true
true
true
true
true
Test file-seq
nil
/private/tmp/PLANCK_FILE_SEQ/A
/private/tmp/PLANCK_FILE_SEQ/A/B
/private/tmp/PLANCK_FILE_SEQ/A/B/E
/private/tmp/PLANCK_FILE_SEQ/A/B/F
/private/tmp/PLANCK_FILE_SEQ/A/C
/private/tmp/PLANCK_FILE_SEQ/A/C/G
/private/tmp/PLANCK_FILE_SEQ/A/D
nil
Test Google Closure index
nil
Test availability of goog libs
nil
#object[Object 20050403]
