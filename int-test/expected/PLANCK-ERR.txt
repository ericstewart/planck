hello stderr
WARNING: Use of undeclared Var cljs.user/not-symbol
WARNING: planck.io/spit is deprecated. at line 1 
WARNING: planck.io/spit is deprecated. at line 1 
WARNING: planck.io/spit is deprecated. at line 1 
WARNING: planck.io/spit is deprecated. at line 1 
WARNING: planck.io/spit is deprecated. at line 1 
WARNING: planck.io/spit is deprecated. at line 1 
WARNING: Use of undeclared Var test-load-file.error-in-file/invalid at line 3 
Evaluating (println "hi")
cljs.core.println.call(null,"hi")
Namespace side effects for cljs.user
Loading dependencies for cljs.user
Loading planck.core namespace
Evaluating planck.core
Namespace side effects for planck.core
Processing :use-macros for planck.core
Processing :require-macros for planck.core
goog.provide("planck.core");
/**
 * Causes Planck to terminate with the supplied exit-value.
 */
planck.core.exit = (function planck$core$exit(exit_value){
PLANCK_SET_EXIT_VALUE(exit_value);

throw (new Error("PLANCK_EXIT"));
});

planck.core.IClosable = {};

planck.core._close = (function planck$core$_close(this$){
if((!((this$ == null))) && (!((this$.planck$core$IClosable$_close$arity$1 == null)))){
return this$.planck$core$IClosable$_close$arity$1(this$);
} else {
var x__11570__auto__ = (((this$ == null))?null:this$);
var m__11571__auto__ = (planck.core._close[goog.typeOf(x__11570__auto__)]);
if(!((m__11571__auto__ == null))){
return m__11571__auto__.call(null,this$);
} else {
var m__11571__auto____$1 = (planck.core._close["_"]);
if(!((m__11571__auto____$1 == null))){
return m__11571__auto____$1.call(null,this$);
} else {
throw cljs.core.missing_protocol.call(null,"IClosable.-close",this$);
}
}
}
});


planck.core.IReader = {};

/**
 * Returns available characters as a string or nil of EOF.
 */
planck.core._read = (function planck$core$_read(this$){
if((!((this$ == null))) && (!((this$.planck$core$IReader$_read$arity$1 == null)))){
return this$.planck$core$IReader$_read$arity$1(this$);
} else {
var x__11570__auto__ = (((this$ == null))?null:this$);
var m__11571__auto__ = (planck.core._read[goog.typeOf(x__11570__auto__)]);
if(!((m__11571__auto__ == null))){
return m__11571__auto__.call(null,this$);
} else {
var m__11571__auto____$1 = (planck.core._read["_"]);
if(!((m__11571__auto____$1 == null))){
return m__11571__auto____$1.call(null,this$);
} else {
throw cljs.core.missing_protocol.call(null,"IReader.-read",this$);
}
}
}
});


/**
* @constructor
* @param {*} raw_read
* @param {*} raw_close
* @param {*} __meta
* @param {*} __extmap
* @param {*} __hash
* @param {*=} __meta 
* @param {*=} __extmap
* @param {number|null} __hash
*/
planck.core.Reader = (function (raw_read,raw_close,__meta,__extmap,__hash){
this.raw_read = raw_read;
this.raw_close = raw_close;
this.__meta = __meta;
this.__extmap = __extmap;
this.__hash = __hash;
this.cljs$lang$protocol_mask$partition0$ = -2065299702;
this.cljs$lang$protocol_mask$partition1$ = 0;
})
planck.core.Reader.prototype.cljs$core$ILookup$_lookup$arity$2 = (function (this__11539__auto__,k__11540__auto__){
var self__ = this;
var this__11539__auto____$1 = this;
return cljs.core._lookup.call(null,this__11539__auto____$1,k__11540__auto__,null);
});

planck.core.Reader.prototype.cljs$core$ILookup$_lookup$arity$3 = (function (this__11541__auto__,k27,else__11542__auto__){
var self__ = this;
var this__11541__auto____$1 = this;
var G__29 = (((k27 instanceof cljs.core.Keyword))?k27.fqn:null);
switch (G__29) {
case "raw-read":
return self__.raw_read;

break;
case "raw-close":
return self__.raw_close;

break;
default:
return cljs.core.get.call(null,self__.__extmap,k27,else__11542__auto__);

}
});

planck.core.Reader.prototype.planck$core$IClosable$ = true;

planck.core.Reader.prototype.planck$core$IClosable$_close$arity$1 = (function (_){
var self__ = this;
var ___$1 = this;
return self__.raw_close.call(null);
});

planck.core.Reader.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = (function (this__11553__auto__,writer__11554__auto__,opts__11555__auto__){
var self__ = this;
var this__11553__auto____$1 = this;
var pr_pair__11556__auto__ = ((function (this__11553__auto____$1){
return (function (keyval__11557__auto__){
return cljs.core.pr_sequential_writer.call(null,writer__11554__auto__,cljs.core.pr_writer,""," ","",opts__11555__auto__,keyval__11557__auto__);
});})(this__11553__auto____$1))
;
return cljs.core.pr_sequential_writer.call(null,writer__11554__auto__,pr_pair__11556__auto__,"#planck.core.Reader{",", ","}",opts__11555__auto__,cljs.core.concat.call(null,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(new cljs.core.PersistentVector(null,2,5,cljs.core.PersistentVector.EMPTY_NODE,[new cljs.core.Keyword(null,"raw-read","raw-read",2035195129),self__.raw_read],null)),(new cljs.core.PersistentVector(null,2,5,cljs.core.PersistentVector.EMPTY_NODE,[new cljs.core.Keyword(null,"raw-close","raw-close",444002765),self__.raw_close],null))], null),self__.__extmap));
});

planck.core.Reader.prototype.cljs$core$IIterable$ = true;

planck.core.Reader.prototype.cljs$core$IIterable$_iterator$arity$1 = (function (G__26){
var self__ = this;
var G__26__$1 = this;
return (new cljs.core.RecordIter(0,G__26__$1,2,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"raw-read","raw-read",2035195129),new cljs.core.Keyword(null,"raw-close","raw-close",444002765)], null),cljs.core._iterator.call(null,self__.__extmap)));
});

planck.core.Reader.prototype.cljs$core$IMeta$_meta$arity$1 = (function (this__11537__auto__){
var self__ = this;
var this__11537__auto____$1 = this;
return self__.__meta;
});

planck.core.Reader.prototype.cljs$core$ICloneable$_clone$arity$1 = (function (this__11533__auto__){
var self__ = this;
var this__11533__auto____$1 = this;
return (new planck.core.Reader(self__.raw_read,self__.raw_close,self__.__meta,self__.__extmap,self__.__hash));
});

planck.core.Reader.prototype.cljs$core$ICounted$_count$arity$1 = (function (this__11543__auto__){
var self__ = this;
var this__11543__auto____$1 = this;
return (2 + cljs.core.count.call(null,self__.__extmap));
});

planck.core.Reader.prototype.cljs$core$IHash$_hash$arity$1 = (function (this__11534__auto__){
var self__ = this;
var this__11534__auto____$1 = this;
var h__11369__auto__ = self__.__hash;
if(!((h__11369__auto__ == null))){
return h__11369__auto__;
} else {
var h__11369__auto____$1 = cljs.core.hash_imap.call(null,this__11534__auto____$1);
self__.__hash = h__11369__auto____$1;

return h__11369__auto____$1;
}
});

planck.core.Reader.prototype.cljs$core$IEquiv$_equiv$arity$2 = (function (this__11535__auto__,other__11536__auto__){
var self__ = this;
var this__11535__auto____$1 = this;
if(cljs.core.truth_((function (){var and__11066__auto__ = other__11536__auto__;
if(cljs.core.truth_(and__11066__auto__)){
var and__11066__auto____$1 = (this__11535__auto____$1.constructor$ === other__11536__auto__.constructor$);
if(and__11066__auto____$1){
return cljs.core.equiv_map.call(null,this__11535__auto____$1,other__11536__auto__);
} else {
return and__11066__auto____$1;
}
} else {
return and__11066__auto__;
}
})())){
return true;
} else {
return false;
}
});

planck.core.Reader.prototype.cljs$core$IMap$_dissoc$arity$2 = (function (this__11548__auto__,k__11549__auto__){
var self__ = this;
var this__11548__auto____$1 = this;
if(cljs.core.contains_QMARK_.call(null,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"raw-read","raw-read",2035195129),null,new cljs.core.Keyword(null,"raw-close","raw-close",444002765),null], null), null),k__11549__auto__)){
return cljs.core.dissoc.call(null,cljs.core.with_meta.call(null,cljs.core.into.call(null,cljs.core.PersistentArrayMap.EMPTY,this__11548__auto____$1),self__.__meta),k__11549__auto__);
} else {
return (new planck.core.Reader(self__.raw_read,self__.raw_close,self__.__meta,cljs.core.not_empty.call(null,cljs.core.dissoc.call(null,self__.__extmap,k__11549__auto__)),null));
}
});

planck.core.Reader.prototype.cljs$core$IAssociative$_assoc$arity$3 = (function (this__11546__auto__,k__11547__auto__,G__26){
var self__ = this;
var this__11546__auto____$1 = this;
var pred__30 = cljs.core.keyword_identical_QMARK_;
var expr__31 = k__11547__auto__;
if(cljs.core.truth_(pred__30.call(null,new cljs.core.Keyword(null,"raw-read","raw-read",2035195129),expr__31))){
return (new planck.core.Reader(G__26,self__.raw_close,self__.__meta,self__.__extmap,null));
} else {
if(cljs.core.truth_(pred__30.call(null,new cljs.core.Keyword(null,"raw-close","raw-close",444002765),expr__31))){
return (new planck.core.Reader(self__.raw_read,G__26,self__.__meta,self__.__extmap,null));
} else {
return (new planck.core.Reader(self__.raw_read,self__.raw_close,self__.__meta,cljs.core.assoc.call(null,self__.__extmap,k__11547__auto__,G__26),null));
}
}
});

planck.core.Reader.prototype.cljs$core$ISeqable$_seq$arity$1 = (function (this__11551__auto__){
var self__ = this;
var this__11551__auto____$1 = this;
return cljs.core.seq.call(null,cljs.core.concat.call(null,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(new cljs.core.PersistentVector(null,2,5,cljs.core.PersistentVector.EMPTY_NODE,[new cljs.core.Keyword(null,"raw-read","raw-read",2035195129),self__.raw_read],null)),(new cljs.core.PersistentVector(null,2,5,cljs.core.PersistentVector.EMPTY_NODE,[new cljs.core.Keyword(null,"raw-close","raw-close",444002765),self__.raw_close],null))], null),self__.__extmap));
});

planck.core.Reader.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = (function (this__11538__auto__,G__26){
var self__ = this;
var this__11538__auto____$1 = this;
return (new planck.core.Reader(self__.raw_read,self__.raw_close,G__26,self__.__extmap,self__.__hash));
});

planck.core.Reader.prototype.cljs$core$ICollection$_conj$arity$2 = (function (this__11544__auto__,entry__11545__auto__){
var self__ = this;
var this__11544__auto____$1 = this;
if(cljs.core.vector_QMARK_.call(null,entry__11545__auto__)){
return cljs.core._assoc.call(null,this__11544__auto____$1,cljs.core._nth.call(null,entry__11545__auto__,0),cljs.core._nth.call(null,entry__11545__auto__,1));
} else {
return cljs.core.reduce.call(null,cljs.core._conj,this__11544__auto____$1,entry__11545__auto__);
}
});

planck.core.Reader.prototype.planck$core$IReader$ = true;

planck.core.Reader.prototype.planck$core$IReader$_read$arity$1 = (function (_){
var self__ = this;
var ___$1 = this;
return self__.raw_read.call(null);
});

planck.core.Reader.getBasis = (function (){
return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"raw-read","raw-read",-619240640,null),new cljs.core.Symbol(null,"raw-close","raw-close",2084534292,null)], null);
});

planck.core.Reader.cljs$lang$type = true;

planck.core.Reader.cljs$lang$ctorPrSeq = (function (this__11560__auto__){
return cljs.core._conj.call(null,cljs.core.List.EMPTY,"planck.core/Reader");
});

planck.core.Reader.cljs$lang$ctorPrWriter = (function (this__11560__auto__,writer__11561__auto__){
return cljs.core._write.call(null,writer__11561__auto__,"planck.core/Reader");
});

planck.core.__GT_Reader = (function planck$core$__GT_Reader(raw_read,raw_close){
return (new planck.core.Reader(raw_read,raw_close,null,null,null));
});

planck.core.map__GT_Reader = (function planck$core$map__GT_Reader(G__28){
return (new planck.core.Reader(new cljs.core.Keyword(null,"raw-read","raw-read",2035195129).cljs$core$IFn$_invoke$arity$1(G__28),new cljs.core.Keyword(null,"raw-close","raw-close",444002765).cljs$core$IFn$_invoke$arity$1(G__28),null,cljs.core.dissoc.call(null,G__28,new cljs.core.Keyword(null,"raw-read","raw-read",2035195129),new cljs.core.Keyword(null,"raw-close","raw-close",444002765)),null));
});


/**
* @constructor
* @param {*} raw_write
* @param {*} raw_flush
* @param {*} raw_close
* @param {*} __meta
* @param {*} __extmap
* @param {*} __hash
* @param {*=} __meta 
* @param {*=} __extmap
* @param {number|null} __hash
*/
planck.core.Writer = (function (raw_write,raw_flush,raw_close,__meta,__extmap,__hash){
this.raw_write = raw_write;
this.raw_flush = raw_flush;
this.raw_close = raw_close;
this.__meta = __meta;
this.__extmap = __extmap;
this.__hash = __hash;
this.cljs$lang$protocol_mask$partition0$ = -991557878;
this.cljs$lang$protocol_mask$partition1$ = 0;
})
planck.core.Writer.prototype.cljs$core$ILookup$_lookup$arity$2 = (function (this__11539__auto__,k__11540__auto__){
var self__ = this;
var this__11539__auto____$1 = this;
return cljs.core._lookup.call(null,this__11539__auto____$1,k__11540__auto__,null);
});

planck.core.Writer.prototype.cljs$core$ILookup$_lookup$arity$3 = (function (this__11541__auto__,k35,else__11542__auto__){
var self__ = this;
var this__11541__auto____$1 = this;
var G__37 = (((k35 instanceof cljs.core.Keyword))?k35.fqn:null);
switch (G__37) {
case "raw-write":
return self__.raw_write;

break;
case "raw-flush":
return self__.raw_flush;

break;
case "raw-close":
return self__.raw_close;

break;
default:
return cljs.core.get.call(null,self__.__extmap,k35,else__11542__auto__);

}
});

planck.core.Writer.prototype.planck$core$IClosable$ = true;

planck.core.Writer.prototype.planck$core$IClosable$_close$arity$1 = (function (_){
var self__ = this;
var ___$1 = this;
return self__.raw_close.call(null);
});

planck.core.Writer.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = (function (this__11553__auto__,writer__11554__auto__,opts__11555__auto__){
var self__ = this;
var this__11553__auto____$1 = this;
var pr_pair__11556__auto__ = ((function (this__11553__auto____$1){
return (function (keyval__11557__auto__){
return cljs.core.pr_sequential_writer.call(null,writer__11554__auto__,cljs.core.pr_writer,""," ","",opts__11555__auto__,keyval__11557__auto__);
});})(this__11553__auto____$1))
;
return cljs.core.pr_sequential_writer.call(null,writer__11554__auto__,pr_pair__11556__auto__,"#planck.core.Writer{",", ","}",opts__11555__auto__,cljs.core.concat.call(null,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(new cljs.core.PersistentVector(null,2,5,cljs.core.PersistentVector.EMPTY_NODE,[new cljs.core.Keyword(null,"raw-write","raw-write",1148634861),self__.raw_write],null)),(new cljs.core.PersistentVector(null,2,5,cljs.core.PersistentVector.EMPTY_NODE,[new cljs.core.Keyword(null,"raw-flush","raw-flush",-386632812),self__.raw_flush],null)),(new cljs.core.PersistentVector(null,2,5,cljs.core.PersistentVector.EMPTY_NODE,[new cljs.core.Keyword(null,"raw-close","raw-close",444002765),self__.raw_close],null))], null),self__.__extmap));
});

planck.core.Writer.prototype.cljs$core$IIterable$ = true;

planck.core.Writer.prototype.cljs$core$IIterable$_iterator$arity$1 = (function (G__34){
var self__ = this;
var G__34__$1 = this;
return (new cljs.core.RecordIter(0,G__34__$1,3,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"raw-write","raw-write",1148634861),new cljs.core.Keyword(null,"raw-flush","raw-flush",-386632812),new cljs.core.Keyword(null,"raw-close","raw-close",444002765)], null),cljs.core._iterator.call(null,self__.__extmap)));
});

planck.core.Writer.prototype.cljs$core$IMeta$_meta$arity$1 = (function (this__11537__auto__){
var self__ = this;
var this__11537__auto____$1 = this;
return self__.__meta;
});

planck.core.Writer.prototype.cljs$core$ICloneable$_clone$arity$1 = (function (this__11533__auto__){
var self__ = this;
var this__11533__auto____$1 = this;
return (new planck.core.Writer(self__.raw_write,self__.raw_flush,self__.raw_close,self__.__meta,self__.__extmap,self__.__hash));
});

planck.core.Writer.prototype.cljs$core$ICounted$_count$arity$1 = (function (this__11543__auto__){
var self__ = this;
var this__11543__auto____$1 = this;
return (3 + cljs.core.count.call(null,self__.__extmap));
});

planck.core.Writer.prototype.cljs$core$IHash$_hash$arity$1 = (function (this__11534__auto__){
var self__ = this;
var this__11534__auto____$1 = this;
var h__11369__auto__ = self__.__hash;
if(!((h__11369__auto__ == null))){
return h__11369__auto__;
} else {
var h__11369__auto____$1 = cljs.core.hash_imap.call(null,this__11534__auto____$1);
self__.__hash = h__11369__auto____$1;

return h__11369__auto____$1;
}
});

planck.core.Writer.prototype.cljs$core$IEquiv$_equiv$arity$2 = (function (this__11535__auto__,other__11536__auto__){
var self__ = this;
var this__11535__auto____$1 = this;
if(cljs.core.truth_((function (){var and__11066__auto__ = other__11536__auto__;
if(cljs.core.truth_(and__11066__auto__)){
var and__11066__auto____$1 = (this__11535__auto____$1.constructor$ === other__11536__auto__.constructor$);
if(and__11066__auto____$1){
return cljs.core.equiv_map.call(null,this__11535__auto____$1,other__11536__auto__);
} else {
return and__11066__auto____$1;
}
} else {
return and__11066__auto__;
}
})())){
return true;
} else {
return false;
}
});

planck.core.Writer.prototype.cljs$core$IMap$_dissoc$arity$2 = (function (this__11548__auto__,k__11549__auto__){
var self__ = this;
var this__11548__auto____$1 = this;
if(cljs.core.contains_QMARK_.call(null,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,"raw-write","raw-write",1148634861),null,new cljs.core.Keyword(null,"raw-flush","raw-flush",-386632812),null,new cljs.core.Keyword(null,"raw-close","raw-close",444002765),null], null), null),k__11549__auto__)){
return cljs.core.dissoc.call(null,cljs.core.with_meta.call(null,cljs.core.into.call(null,cljs.core.PersistentArrayMap.EMPTY,this__11548__auto____$1),self__.__meta),k__11549__auto__);
} else {
return (new planck.core.Writer(self__.raw_write,self__.raw_flush,self__.raw_close,self__.__meta,cljs.core.not_empty.call(null,cljs.core.dissoc.call(null,self__.__extmap,k__11549__auto__)),null));
}
});

planck.core.Writer.prototype.cljs$core$IAssociative$_assoc$arity$3 = (function (this__11546__auto__,k__11547__auto__,G__34){
var self__ = this;
var this__11546__auto____$1 = this;
var pred__38 = cljs.core.keyword_identical_QMARK_;
var expr__39 = k__11547__auto__;
if(cljs.core.truth_(pred__38.call(null,new cljs.core.Keyword(null,"raw-write","raw-write",1148634861),expr__39))){
return (new planck.core.Writer(G__34,self__.raw_flush,self__.raw_close,self__.__meta,self__.__extmap,null));
} else {
if(cljs.core.truth_(pred__38.call(null,new cljs.core.Keyword(null,"raw-flush","raw-flush",-386632812),expr__39))){
return (new planck.core.Writer(self__.raw_write,G__34,self__.raw_close,self__.__meta,self__.__extmap,null));
} else {
if(cljs.core.truth_(pred__38.call(null,new cljs.core.Keyword(null,"raw-close","raw-close",444002765),expr__39))){
return (new planck.core.Writer(self__.raw_write,self__.raw_flush,G__34,self__.__meta,self__.__extmap,null));
} else {
return (new planck.core.Writer(self__.raw_write,self__.raw_flush,self__.raw_close,self__.__meta,cljs.core.assoc.call(null,self__.__extmap,k__11547__auto__,G__34),null));
}
}
}
});

planck.core.Writer.prototype.cljs$core$ISeqable$_seq$arity$1 = (function (this__11551__auto__){
var self__ = this;
var this__11551__auto____$1 = this;
return cljs.core.seq.call(null,cljs.core.concat.call(null,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(new cljs.core.PersistentVector(null,2,5,cljs.core.PersistentVector.EMPTY_NODE,[new cljs.core.Keyword(null,"raw-write","raw-write",1148634861),self__.raw_write],null)),(new cljs.core.PersistentVector(null,2,5,cljs.core.PersistentVector.EMPTY_NODE,[new cljs.core.Keyword(null,"raw-flush","raw-flush",-386632812),self__.raw_flush],null)),(new cljs.core.PersistentVector(null,2,5,cljs.core.PersistentVector.EMPTY_NODE,[new cljs.core.Keyword(null,"raw-close","raw-close",444002765),self__.raw_close],null))], null),self__.__extmap));
});

planck.core.Writer.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = (function (this__11538__auto__,G__34){
var self__ = this;
var this__11538__auto____$1 = this;
return (new planck.core.Writer(self__.raw_write,self__.raw_flush,self__.raw_close,G__34,self__.__extmap,self__.__hash));
});

planck.core.Writer.prototype.cljs$core$ICollection$_conj$arity$2 = (function (this__11544__auto__,entry__11545__auto__){
var self__ = this;
var this__11544__auto____$1 = this;
if(cljs.core.vector_QMARK_.call(null,entry__11545__auto__)){
return cljs.core._assoc.call(null,this__11544__auto____$1,cljs.core._nth.call(null,entry__11545__auto__,0),cljs.core._nth.call(null,entry__11545__auto__,1));
} else {
return cljs.core.reduce.call(null,cljs.core._conj,this__11544__auto____$1,entry__11545__auto__);
}
});

planck.core.Writer.prototype.cljs$core$IWriter$_write$arity$2 = (function (_,s){
var self__ = this;
var ___$1 = this;
return self__.raw_write.call(null,s);
});

planck.core.Writer.prototype.cljs$core$IWriter$_flush$arity$1 = (function (_){
var self__ = this;
var ___$1 = this;
return self__.raw_flush.call(null);
});

planck.core.Writer.getBasis = (function (){
return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"raw-write","raw-write",-1505800908,null),new cljs.core.Symbol(null,"raw-flush","raw-flush",1253898715,null),new cljs.core.Symbol(null,"raw-close","raw-close",2084534292,null)], null);
});

planck.core.Writer.cljs$lang$type = true;

planck.core.Writer.cljs$lang$ctorPrSeq = (function (this__11560__auto__){
return cljs.core._conj.call(null,cljs.core.List.EMPTY,"planck.core/Writer");
});

planck.core.Writer.cljs$lang$ctorPrWriter = (function (this__11560__auto__,writer__11561__auto__){
return cljs.core._write.call(null,writer__11561__auto__,"planck.core/Writer");
});

planck.core.__GT_Writer = (function planck$core$__GT_Writer(raw_write,raw_flush,raw_close){
return (new planck.core.Writer(raw_write,raw_flush,raw_close,null,null,null));
});

planck.core.map__GT_Writer = (function planck$core$map__GT_Writer(G__36){
return (new planck.core.Writer(new cljs.core.Keyword(null,"raw-write","raw-write",1148634861).cljs$core$IFn$_invoke$arity$1(G__36),new cljs.core.Keyword(null,"raw-flush","raw-flush",-386632812).cljs$core$IFn$_invoke$arity$1(G__36),new cljs.core.Keyword(null,"raw-close","raw-close",444002765).cljs$core$IFn$_invoke$arity$1(G__36),null,cljs.core.dissoc.call(null,G__36,new cljs.core.Keyword(null,"raw-write","raw-write",1148634861),new cljs.core.Keyword(null,"raw-flush","raw-flush",-386632812),new cljs.core.Keyword(null,"raw-close","raw-close",444002765)),null));
});

if(typeof planck.core._STAR_in_STAR_ !== 'undefined'){
} else {
/**
 * A planck.io/IReader representing standard input for read operations.
 */
planck.core._STAR_in_STAR_ = (new planck.core.Reader(PLANCK_RAW_READ_STDIN,null,null,null,null));
}
cljs.core._STAR_out_STAR_ = (new planck.core.Writer(PLANCK_RAW_WRITE_STDOUT,PLANCK_RAW_FLUSH_STDOUT,null,null,null,null));
if(typeof planck.core._STAR_err_STAR_ !== 'undefined'){
} else {
/**
 * A cljs.core/IWriter representing standard error for print operations.
 */
planck.core._STAR_err_STAR_ = (new planck.core.Writer(PLANCK_RAW_WRITE_STDERR,PLANCK_RAW_FLUSH_STDERR,null,null,null,null));
}
if(typeof planck.core._STAR_command_line_args_STAR_ !== 'undefined'){
} else {
/**
 * A sequence of the supplied command line arguments, or nil if none were supplied
 */
planck.core._STAR_command_line_args_STAR_ = cljs.core.seq.call(null,cljs.core.js__GT_clj.call(null,PLANCK_INITIAL_COMMAND_LINE_ARGS));
}
/**
 * A tree seq on PLKFiles
 */
planck.core.file_seq = (function planck$core$file_seq(dir){
return PLANCK_IO_FILESEQ(dir);
});
/**
 * Breaks an atom's value into two parts. The supplied function should
 * return a pair. The first element will be set to be the atom's new
 * value and the second element will be returned.
 */
planck.core.fission_BANG_ = (function planck$core$fission_BANG_(){
var args__11940__auto__ = [];
var len__11938__auto___46 = arguments.length;
var i__11939__auto___47 = 0;
while(true){
if((i__11939__auto___47 < len__11938__auto___46)){
args__11940__auto__.push((arguments[i__11939__auto___47]));

var G__48 = (i__11939__auto___47 + 1);
i__11939__auto___47 = G__48;
continue;
} else {
}
break;
}

var argseq__11941__auto__ = (((2 < args__11940__auto__.length))?(new cljs.core.IndexedSeq(args__11940__auto__.slice(2),0)):null);
return planck.core.fission_BANG_.cljs$core$IFn$_invoke$arity$variadic((arguments[0]),(arguments[1]),argseq__11941__auto__);
});

planck.core.fission_BANG_.cljs$core$IFn$_invoke$arity$variadic = (function (atom,f,args){
while(true){
var old = cljs.core.deref.call(null,atom);
var vec__45 = cljs.core.apply.call(null,f,old,args);
var new_in = cljs.core.nth.call(null,vec__45,0,null);
var new_out = cljs.core.nth.call(null,vec__45,1,null);
if(cljs.core.truth_(cljs.core.compare_and_set_BANG_.call(null,atom,old,new_in))){
return new_out;
} else {
continue;
}
break;
}
});

planck.core.fission_BANG_.cljs$lang$maxFixedArity = 2;

planck.core.fission_BANG_.cljs$lang$applyTo = (function (seq42){
var G__43 = cljs.core.first.call(null,seq42);
var seq42__$1 = cljs.core.next.call(null,seq42);
var G__44 = cljs.core.first.call(null,seq42__$1);
var seq42__$2 = cljs.core.next.call(null,seq42__$1);
return planck.core.fission_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__43,G__44,seq42__$2);
});
if(typeof planck.core.buffer !== 'undefined'){
} else {
planck.core.buffer = cljs.core.atom.call(null,null);
}
/**
 * Reads the next line from the current value of planck.io/*in*
 */
planck.core.read_line = (function planck$core$read_line(){
while(true){
var temp__10853__auto__ = cljs.core.deref.call(null,planck.core.buffer);
if(cljs.core.truth_(temp__10853__auto__)){
var buffered = temp__10853__auto__;
var n = buffered.indexOf("\n");
if((n < 0)){
var temp__10853__auto____$1 = planck.core._read.call(null,planck.core._STAR_in_STAR_);
if(cljs.core.truth_(temp__10853__auto____$1)){
var next_characters = temp__10853__auto____$1;
cljs.core.swap_BANG_.call(null,planck.core.buffer,((function (next_characters,temp__10853__auto____$1,n,buffered,temp__10853__auto__){
return (function (s){
return [cljs.core.str(s),cljs.core.str(next_characters)].join('');
});})(next_characters,temp__10853__auto____$1,n,buffered,temp__10853__auto__))
);

continue;
} else {
return planck.core.fission_BANG_.call(null,planck.core.buffer,((function (temp__10853__auto____$1,n,buffered,temp__10853__auto__){
return (function (s){
return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null,s], null);
});})(temp__10853__auto____$1,n,buffered,temp__10853__auto__))
);
}
} else {
return planck.core.fission_BANG_.call(null,planck.core.buffer,((function (n,buffered,temp__10853__auto__){
return (function (s){
return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var residual = cljs.core.subs.call(null,s,(n + 1));
if(cljs.core._EQ_.call(null,"",residual)){
return null;
} else {
return residual;
}
})(),cljs.core.subs.call(null,s,0,n)], null);
});})(n,buffered,temp__10853__auto__))
);
}
} else {
if(cljs.core.truth_(cljs.core.reset_BANG_.call(null,planck.core.buffer,planck.core._read.call(null,planck.core._STAR_in_STAR_)))){
continue;
} else {
return null;
}
}
break;
}
});
/**
 * Slurps a file
 */
planck.core.slurp = (function planck$core$slurp(filename){
var or__11080__auto__ = PLANCK_READ_FILE(filename);
if(cljs.core.truth_(or__11080__auto__)){
return or__11080__auto__;
} else {
throw (new Error(filename));
}
});
/**
 * Spits a file
 */
planck.core.spit = (function planck$core$spit(filename,content){
PLANCK_WRITE_FILE(filename,content);

return null;
});

Loading dependencies for cljs.user
Processing :use-macros for cljs.user
Processing :require-macros for cljs.user
Evaluating planck.core/*command-line-args*
planck.core._STAR_command_line_args_STAR_
Evaluating (println "hi")
cljs.core.println.call(null,"hi")
Namespace side effects for cljs.user
Loading dependencies for cljs.user
Loading planck.core namespace
Evaluating planck.core
Namespace side effects for planck.core
Processing :use-macros for planck.core
Processing :require-macros for planck.core
goog.provide("planck.core");
/**
 * Causes Planck to terminate with the supplied exit-value.
 */
planck.core.exit = (function planck$core$exit(exit_value){
PLANCK_SET_EXIT_VALUE(exit_value);

throw (new Error("PLANCK_EXIT"));
});

planck.core.IClosable = {};

planck.core._close = (function planck$core$_close(this$){
if((!((this$ == null))) && (!((this$.planck$core$IClosable$_close$arity$1 == null)))){
return this$.planck$core$IClosable$_close$arity$1(this$);
} else {
var x__11570__auto__ = (((this$ == null))?null:this$);
var m__11571__auto__ = (planck.core._close[goog.typeOf(x__11570__auto__)]);
if(!((m__11571__auto__ == null))){
return m__11571__auto__.call(null,this$);
} else {
var m__11571__auto____$1 = (planck.core._close["_"]);
if(!((m__11571__auto____$1 == null))){
return m__11571__auto____$1.call(null,this$);
} else {
throw cljs.core.missing_protocol.call(null,"IClosable.-close",this$);
}
}
}
});


planck.core.IReader = {};

/**
 * Returns available characters as a string or nil of EOF.
 */
planck.core._read = (function planck$core$_read(this$){
if((!((this$ == null))) && (!((this$.planck$core$IReader$_read$arity$1 == null)))){
return this$.planck$core$IReader$_read$arity$1(this$);
} else {
var x__11570__auto__ = (((this$ == null))?null:this$);
var m__11571__auto__ = (planck.core._read[goog.typeOf(x__11570__auto__)]);
if(!((m__11571__auto__ == null))){
return m__11571__auto__.call(null,this$);
} else {
var m__11571__auto____$1 = (planck.core._read["_"]);
if(!((m__11571__auto____$1 == null))){
return m__11571__auto____$1.call(null,this$);
} else {
throw cljs.core.missing_protocol.call(null,"IReader.-read",this$);
}
}
}
});


/**
* @constructor
* @param {*} raw_read
* @param {*} raw_close
* @param {*} __meta
* @param {*} __extmap
* @param {*} __hash
* @param {*=} __meta 
* @param {*=} __extmap
* @param {number|null} __hash
*/
planck.core.Reader = (function (raw_read,raw_close,__meta,__extmap,__hash){
this.raw_read = raw_read;
this.raw_close = raw_close;
this.__meta = __meta;
this.__extmap = __extmap;
this.__hash = __hash;
this.cljs$lang$protocol_mask$partition0$ = -2065299702;
this.cljs$lang$protocol_mask$partition1$ = 0;
})
planck.core.Reader.prototype.cljs$core$ILookup$_lookup$arity$2 = (function (this__11539__auto__,k__11540__auto__){
var self__ = this;
var this__11539__auto____$1 = this;
return cljs.core._lookup.call(null,this__11539__auto____$1,k__11540__auto__,null);
});

planck.core.Reader.prototype.cljs$core$ILookup$_lookup$arity$3 = (function (this__11541__auto__,k27,else__11542__auto__){
var self__ = this;
var this__11541__auto____$1 = this;
var G__29 = (((k27 instanceof cljs.core.Keyword))?k27.fqn:null);
switch (G__29) {
case "raw-read":
return self__.raw_read;

break;
case "raw-close":
return self__.raw_close;

break;
default:
return cljs.core.get.call(null,self__.__extmap,k27,else__11542__auto__);

}
});

planck.core.Reader.prototype.planck$core$IClosable$ = true;

planck.core.Reader.prototype.planck$core$IClosable$_close$arity$1 = (function (_){
var self__ = this;
var ___$1 = this;
return self__.raw_close.call(null);
});

planck.core.Reader.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = (function (this__11553__auto__,writer__11554__auto__,opts__11555__auto__){
var self__ = this;
var this__11553__auto____$1 = this;
var pr_pair__11556__auto__ = ((function (this__11553__auto____$1){
return (function (keyval__11557__auto__){
return cljs.core.pr_sequential_writer.call(null,writer__11554__auto__,cljs.core.pr_writer,""," ","",opts__11555__auto__,keyval__11557__auto__);
});})(this__11553__auto____$1))
;
return cljs.core.pr_sequential_writer.call(null,writer__11554__auto__,pr_pair__11556__auto__,"#planck.core.Reader{",", ","}",opts__11555__auto__,cljs.core.concat.call(null,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(new cljs.core.PersistentVector(null,2,5,cljs.core.PersistentVector.EMPTY_NODE,[new cljs.core.Keyword(null,"raw-read","raw-read",2035195129),self__.raw_read],null)),(new cljs.core.PersistentVector(null,2,5,cljs.core.PersistentVector.EMPTY_NODE,[new cljs.core.Keyword(null,"raw-close","raw-close",444002765),self__.raw_close],null))], null),self__.__extmap));
});

planck.core.Reader.prototype.cljs$core$IIterable$ = true;

planck.core.Reader.prototype.cljs$core$IIterable$_iterator$arity$1 = (function (G__26){
var self__ = this;
var G__26__$1 = this;
return (new cljs.core.RecordIter(0,G__26__$1,2,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"raw-read","raw-read",2035195129),new cljs.core.Keyword(null,"raw-close","raw-close",444002765)], null),cljs.core._iterator.call(null,self__.__extmap)));
});

planck.core.Reader.prototype.cljs$core$IMeta$_meta$arity$1 = (function (this__11537__auto__){
var self__ = this;
var this__11537__auto____$1 = this;
return self__.__meta;
});

planck.core.Reader.prototype.cljs$core$ICloneable$_clone$arity$1 = (function (this__11533__auto__){
var self__ = this;
var this__11533__auto____$1 = this;
return (new planck.core.Reader(self__.raw_read,self__.raw_close,self__.__meta,self__.__extmap,self__.__hash));
});

planck.core.Reader.prototype.cljs$core$ICounted$_count$arity$1 = (function (this__11543__auto__){
var self__ = this;
var this__11543__auto____$1 = this;
return (2 + cljs.core.count.call(null,self__.__extmap));
});

planck.core.Reader.prototype.cljs$core$IHash$_hash$arity$1 = (function (this__11534__auto__){
var self__ = this;
var this__11534__auto____$1 = this;
var h__11369__auto__ = self__.__hash;
if(!((h__11369__auto__ == null))){
return h__11369__auto__;
} else {
var h__11369__auto____$1 = cljs.core.hash_imap.call(null,this__11534__auto____$1);
self__.__hash = h__11369__auto____$1;

return h__11369__auto____$1;
}
});

planck.core.Reader.prototype.cljs$core$IEquiv$_equiv$arity$2 = (function (this__11535__auto__,other__11536__auto__){
var self__ = this;
var this__11535__auto____$1 = this;
if(cljs.core.truth_((function (){var and__11066__auto__ = other__11536__auto__;
if(cljs.core.truth_(and__11066__auto__)){
var and__11066__auto____$1 = (this__11535__auto____$1.constructor$ === other__11536__auto__.constructor$);
if(and__11066__auto____$1){
return cljs.core.equiv_map.call(null,this__11535__auto____$1,other__11536__auto__);
} else {
return and__11066__auto____$1;
}
} else {
return and__11066__auto__;
}
})())){
return true;
} else {
return false;
}
});

planck.core.Reader.prototype.cljs$core$IMap$_dissoc$arity$2 = (function (this__11548__auto__,k__11549__auto__){
var self__ = this;
var this__11548__auto____$1 = this;
if(cljs.core.contains_QMARK_.call(null,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"raw-read","raw-read",2035195129),null,new cljs.core.Keyword(null,"raw-close","raw-close",444002765),null], null), null),k__11549__auto__)){
return cljs.core.dissoc.call(null,cljs.core.with_meta.call(null,cljs.core.into.call(null,cljs.core.PersistentArrayMap.EMPTY,this__11548__auto____$1),self__.__meta),k__11549__auto__);
} else {
return (new planck.core.Reader(self__.raw_read,self__.raw_close,self__.__meta,cljs.core.not_empty.call(null,cljs.core.dissoc.call(null,self__.__extmap,k__11549__auto__)),null));
}
});

planck.core.Reader.prototype.cljs$core$IAssociative$_assoc$arity$3 = (function (this__11546__auto__,k__11547__auto__,G__26){
var self__ = this;
var this__11546__auto____$1 = this;
var pred__30 = cljs.core.keyword_identical_QMARK_;
var expr__31 = k__11547__auto__;
if(cljs.core.truth_(pred__30.call(null,new cljs.core.Keyword(null,"raw-read","raw-read",2035195129),expr__31))){
return (new planck.core.Reader(G__26,self__.raw_close,self__.__meta,self__.__extmap,null));
} else {
if(cljs.core.truth_(pred__30.call(null,new cljs.core.Keyword(null,"raw-close","raw-close",444002765),expr__31))){
return (new planck.core.Reader(self__.raw_read,G__26,self__.__meta,self__.__extmap,null));
} else {
return (new planck.core.Reader(self__.raw_read,self__.raw_close,self__.__meta,cljs.core.assoc.call(null,self__.__extmap,k__11547__auto__,G__26),null));
}
}
});

planck.core.Reader.prototype.cljs$core$ISeqable$_seq$arity$1 = (function (this__11551__auto__){
var self__ = this;
var this__11551__auto____$1 = this;
return cljs.core.seq.call(null,cljs.core.concat.call(null,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(new cljs.core.PersistentVector(null,2,5,cljs.core.PersistentVector.EMPTY_NODE,[new cljs.core.Keyword(null,"raw-read","raw-read",2035195129),self__.raw_read],null)),(new cljs.core.PersistentVector(null,2,5,cljs.core.PersistentVector.EMPTY_NODE,[new cljs.core.Keyword(null,"raw-close","raw-close",444002765),self__.raw_close],null))], null),self__.__extmap));
});

planck.core.Reader.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = (function (this__11538__auto__,G__26){
var self__ = this;
var this__11538__auto____$1 = this;
return (new planck.core.Reader(self__.raw_read,self__.raw_close,G__26,self__.__extmap,self__.__hash));
});

planck.core.Reader.prototype.cljs$core$ICollection$_conj$arity$2 = (function (this__11544__auto__,entry__11545__auto__){
var self__ = this;
var this__11544__auto____$1 = this;
if(cljs.core.vector_QMARK_.call(null,entry__11545__auto__)){
return cljs.core._assoc.call(null,this__11544__auto____$1,cljs.core._nth.call(null,entry__11545__auto__,0),cljs.core._nth.call(null,entry__11545__auto__,1));
} else {
return cljs.core.reduce.call(null,cljs.core._conj,this__11544__auto____$1,entry__11545__auto__);
}
});

planck.core.Reader.prototype.planck$core$IReader$ = true;

planck.core.Reader.prototype.planck$core$IReader$_read$arity$1 = (function (_){
var self__ = this;
var ___$1 = this;
return self__.raw_read.call(null);
});

planck.core.Reader.getBasis = (function (){
return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"raw-read","raw-read",-619240640,null),new cljs.core.Symbol(null,"raw-close","raw-close",2084534292,null)], null);
});

planck.core.Reader.cljs$lang$type = true;

planck.core.Reader.cljs$lang$ctorPrSeq = (function (this__11560__auto__){
return cljs.core._conj.call(null,cljs.core.List.EMPTY,"planck.core/Reader");
});

planck.core.Reader.cljs$lang$ctorPrWriter = (function (this__11560__auto__,writer__11561__auto__){
return cljs.core._write.call(null,writer__11561__auto__,"planck.core/Reader");
});

planck.core.__GT_Reader = (function planck$core$__GT_Reader(raw_read,raw_close){
return (new planck.core.Reader(raw_read,raw_close,null,null,null));
});

planck.core.map__GT_Reader = (function planck$core$map__GT_Reader(G__28){
return (new planck.core.Reader(new cljs.core.Keyword(null,"raw-read","raw-read",2035195129).cljs$core$IFn$_invoke$arity$1(G__28),new cljs.core.Keyword(null,"raw-close","raw-close",444002765).cljs$core$IFn$_invoke$arity$1(G__28),null,cljs.core.dissoc.call(null,G__28,new cljs.core.Keyword(null,"raw-read","raw-read",2035195129),new cljs.core.Keyword(null,"raw-close","raw-close",444002765)),null));
});


/**
* @constructor
* @param {*} raw_write
* @param {*} raw_flush
* @param {*} raw_close
* @param {*} __meta
* @param {*} __extmap
* @param {*} __hash
* @param {*=} __meta 
* @param {*=} __extmap
* @param {number|null} __hash
*/
planck.core.Writer = (function (raw_write,raw_flush,raw_close,__meta,__extmap,__hash){
this.raw_write = raw_write;
this.raw_flush = raw_flush;
this.raw_close = raw_close;
this.__meta = __meta;
this.__extmap = __extmap;
this.__hash = __hash;
this.cljs$lang$protocol_mask$partition0$ = -991557878;
this.cljs$lang$protocol_mask$partition1$ = 0;
})
planck.core.Writer.prototype.cljs$core$ILookup$_lookup$arity$2 = (function (this__11539__auto__,k__11540__auto__){
var self__ = this;
var this__11539__auto____$1 = this;
return cljs.core._lookup.call(null,this__11539__auto____$1,k__11540__auto__,null);
});

planck.core.Writer.prototype.cljs$core$ILookup$_lookup$arity$3 = (function (this__11541__auto__,k35,else__11542__auto__){
var self__ = this;
var this__11541__auto____$1 = this;
var G__37 = (((k35 instanceof cljs.core.Keyword))?k35.fqn:null);
switch (G__37) {
case "raw-write":
return self__.raw_write;

break;
case "raw-flush":
return self__.raw_flush;

break;
case "raw-close":
return self__.raw_close;

break;
default:
return cljs.core.get.call(null,self__.__extmap,k35,else__11542__auto__);

}
});

planck.core.Writer.prototype.planck$core$IClosable$ = true;

planck.core.Writer.prototype.planck$core$IClosable$_close$arity$1 = (function (_){
var self__ = this;
var ___$1 = this;
return self__.raw_close.call(null);
});

planck.core.Writer.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = (function (this__11553__auto__,writer__11554__auto__,opts__11555__auto__){
var self__ = this;
var this__11553__auto____$1 = this;
var pr_pair__11556__auto__ = ((function (this__11553__auto____$1){
return (function (keyval__11557__auto__){
return cljs.core.pr_sequential_writer.call(null,writer__11554__auto__,cljs.core.pr_writer,""," ","",opts__11555__auto__,keyval__11557__auto__);
});})(this__11553__auto____$1))
;
return cljs.core.pr_sequential_writer.call(null,writer__11554__auto__,pr_pair__11556__auto__,"#planck.core.Writer{",", ","}",opts__11555__auto__,cljs.core.concat.call(null,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(new cljs.core.PersistentVector(null,2,5,cljs.core.PersistentVector.EMPTY_NODE,[new cljs.core.Keyword(null,"raw-write","raw-write",1148634861),self__.raw_write],null)),(new cljs.core.PersistentVector(null,2,5,cljs.core.PersistentVector.EMPTY_NODE,[new cljs.core.Keyword(null,"raw-flush","raw-flush",-386632812),self__.raw_flush],null)),(new cljs.core.PersistentVector(null,2,5,cljs.core.PersistentVector.EMPTY_NODE,[new cljs.core.Keyword(null,"raw-close","raw-close",444002765),self__.raw_close],null))], null),self__.__extmap));
});

planck.core.Writer.prototype.cljs$core$IIterable$ = true;

planck.core.Writer.prototype.cljs$core$IIterable$_iterator$arity$1 = (function (G__34){
var self__ = this;
var G__34__$1 = this;
return (new cljs.core.RecordIter(0,G__34__$1,3,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"raw-write","raw-write",1148634861),new cljs.core.Keyword(null,"raw-flush","raw-flush",-386632812),new cljs.core.Keyword(null,"raw-close","raw-close",444002765)], null),cljs.core._iterator.call(null,self__.__extmap)));
});

planck.core.Writer.prototype.cljs$core$IMeta$_meta$arity$1 = (function (this__11537__auto__){
var self__ = this;
var this__11537__auto____$1 = this;
return self__.__meta;
});

planck.core.Writer.prototype.cljs$core$ICloneable$_clone$arity$1 = (function (this__11533__auto__){
var self__ = this;
var this__11533__auto____$1 = this;
return (new planck.core.Writer(self__.raw_write,self__.raw_flush,self__.raw_close,self__.__meta,self__.__extmap,self__.__hash));
});

planck.core.Writer.prototype.cljs$core$ICounted$_count$arity$1 = (function (this__11543__auto__){
var self__ = this;
var this__11543__auto____$1 = this;
return (3 + cljs.core.count.call(null,self__.__extmap));
});

planck.core.Writer.prototype.cljs$core$IHash$_hash$arity$1 = (function (this__11534__auto__){
var self__ = this;
var this__11534__auto____$1 = this;
var h__11369__auto__ = self__.__hash;
if(!((h__11369__auto__ == null))){
return h__11369__auto__;
} else {
var h__11369__auto____$1 = cljs.core.hash_imap.call(null,this__11534__auto____$1);
self__.__hash = h__11369__auto____$1;

return h__11369__auto____$1;
}
});

planck.core.Writer.prototype.cljs$core$IEquiv$_equiv$arity$2 = (function (this__11535__auto__,other__11536__auto__){
var self__ = this;
var this__11535__auto____$1 = this;
if(cljs.core.truth_((function (){var and__11066__auto__ = other__11536__auto__;
if(cljs.core.truth_(and__11066__auto__)){
var and__11066__auto____$1 = (this__11535__auto____$1.constructor$ === other__11536__auto__.constructor$);
if(and__11066__auto____$1){
return cljs.core.equiv_map.call(null,this__11535__auto____$1,other__11536__auto__);
} else {
return and__11066__auto____$1;
}
} else {
return and__11066__auto__;
}
})())){
return true;
} else {
return false;
}
});

planck.core.Writer.prototype.cljs$core$IMap$_dissoc$arity$2 = (function (this__11548__auto__,k__11549__auto__){
var self__ = this;
var this__11548__auto____$1 = this;
if(cljs.core.contains_QMARK_.call(null,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,"raw-write","raw-write",1148634861),null,new cljs.core.Keyword(null,"raw-flush","raw-flush",-386632812),null,new cljs.core.Keyword(null,"raw-close","raw-close",444002765),null], null), null),k__11549__auto__)){
return cljs.core.dissoc.call(null,cljs.core.with_meta.call(null,cljs.core.into.call(null,cljs.core.PersistentArrayMap.EMPTY,this__11548__auto____$1),self__.__meta),k__11549__auto__);
} else {
return (new planck.core.Writer(self__.raw_write,self__.raw_flush,self__.raw_close,self__.__meta,cljs.core.not_empty.call(null,cljs.core.dissoc.call(null,self__.__extmap,k__11549__auto__)),null));
}
});

planck.core.Writer.prototype.cljs$core$IAssociative$_assoc$arity$3 = (function (this__11546__auto__,k__11547__auto__,G__34){
var self__ = this;
var this__11546__auto____$1 = this;
var pred__38 = cljs.core.keyword_identical_QMARK_;
var expr__39 = k__11547__auto__;
if(cljs.core.truth_(pred__38.call(null,new cljs.core.Keyword(null,"raw-write","raw-write",1148634861),expr__39))){
return (new planck.core.Writer(G__34,self__.raw_flush,self__.raw_close,self__.__meta,self__.__extmap,null));
} else {
if(cljs.core.truth_(pred__38.call(null,new cljs.core.Keyword(null,"raw-flush","raw-flush",-386632812),expr__39))){
return (new planck.core.Writer(self__.raw_write,G__34,self__.raw_close,self__.__meta,self__.__extmap,null));
} else {
if(cljs.core.truth_(pred__38.call(null,new cljs.core.Keyword(null,"raw-close","raw-close",444002765),expr__39))){
return (new planck.core.Writer(self__.raw_write,self__.raw_flush,G__34,self__.__meta,self__.__extmap,null));
} else {
return (new planck.core.Writer(self__.raw_write,self__.raw_flush,self__.raw_close,self__.__meta,cljs.core.assoc.call(null,self__.__extmap,k__11547__auto__,G__34),null));
}
}
}
});

planck.core.Writer.prototype.cljs$core$ISeqable$_seq$arity$1 = (function (this__11551__auto__){
var self__ = this;
var this__11551__auto____$1 = this;
return cljs.core.seq.call(null,cljs.core.concat.call(null,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(new cljs.core.PersistentVector(null,2,5,cljs.core.PersistentVector.EMPTY_NODE,[new cljs.core.Keyword(null,"raw-write","raw-write",1148634861),self__.raw_write],null)),(new cljs.core.PersistentVector(null,2,5,cljs.core.PersistentVector.EMPTY_NODE,[new cljs.core.Keyword(null,"raw-flush","raw-flush",-386632812),self__.raw_flush],null)),(new cljs.core.PersistentVector(null,2,5,cljs.core.PersistentVector.EMPTY_NODE,[new cljs.core.Keyword(null,"raw-close","raw-close",444002765),self__.raw_close],null))], null),self__.__extmap));
});

planck.core.Writer.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = (function (this__11538__auto__,G__34){
var self__ = this;
var this__11538__auto____$1 = this;
return (new planck.core.Writer(self__.raw_write,self__.raw_flush,self__.raw_close,G__34,self__.__extmap,self__.__hash));
});

planck.core.Writer.prototype.cljs$core$ICollection$_conj$arity$2 = (function (this__11544__auto__,entry__11545__auto__){
var self__ = this;
var this__11544__auto____$1 = this;
if(cljs.core.vector_QMARK_.call(null,entry__11545__auto__)){
return cljs.core._assoc.call(null,this__11544__auto____$1,cljs.core._nth.call(null,entry__11545__auto__,0),cljs.core._nth.call(null,entry__11545__auto__,1));
} else {
return cljs.core.reduce.call(null,cljs.core._conj,this__11544__auto____$1,entry__11545__auto__);
}
});

planck.core.Writer.prototype.cljs$core$IWriter$_write$arity$2 = (function (_,s){
var self__ = this;
var ___$1 = this;
return self__.raw_write.call(null,s);
});

planck.core.Writer.prototype.cljs$core$IWriter$_flush$arity$1 = (function (_){
var self__ = this;
var ___$1 = this;
return self__.raw_flush.call(null);
});

planck.core.Writer.getBasis = (function (){
return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"raw-write","raw-write",-1505800908,null),new cljs.core.Symbol(null,"raw-flush","raw-flush",1253898715,null),new cljs.core.Symbol(null,"raw-close","raw-close",2084534292,null)], null);
});

planck.core.Writer.cljs$lang$type = true;

planck.core.Writer.cljs$lang$ctorPrSeq = (function (this__11560__auto__){
return cljs.core._conj.call(null,cljs.core.List.EMPTY,"planck.core/Writer");
});

planck.core.Writer.cljs$lang$ctorPrWriter = (function (this__11560__auto__,writer__11561__auto__){
return cljs.core._write.call(null,writer__11561__auto__,"planck.core/Writer");
});

planck.core.__GT_Writer = (function planck$core$__GT_Writer(raw_write,raw_flush,raw_close){
return (new planck.core.Writer(raw_write,raw_flush,raw_close,null,null,null));
});

planck.core.map__GT_Writer = (function planck$core$map__GT_Writer(G__36){
return (new planck.core.Writer(new cljs.core.Keyword(null,"raw-write","raw-write",1148634861).cljs$core$IFn$_invoke$arity$1(G__36),new cljs.core.Keyword(null,"raw-flush","raw-flush",-386632812).cljs$core$IFn$_invoke$arity$1(G__36),new cljs.core.Keyword(null,"raw-close","raw-close",444002765).cljs$core$IFn$_invoke$arity$1(G__36),null,cljs.core.dissoc.call(null,G__36,new cljs.core.Keyword(null,"raw-write","raw-write",1148634861),new cljs.core.Keyword(null,"raw-flush","raw-flush",-386632812),new cljs.core.Keyword(null,"raw-close","raw-close",444002765)),null));
});

if(typeof planck.core._STAR_in_STAR_ !== 'undefined'){
} else {
/**
 * A planck.io/IReader representing standard input for read operations.
 */
planck.core._STAR_in_STAR_ = (new planck.core.Reader(PLANCK_RAW_READ_STDIN,null,null,null,null));
}
cljs.core._STAR_out_STAR_ = (new planck.core.Writer(PLANCK_RAW_WRITE_STDOUT,PLANCK_RAW_FLUSH_STDOUT,null,null,null,null));
if(typeof planck.core._STAR_err_STAR_ !== 'undefined'){
} else {
/**
 * A cljs.core/IWriter representing standard error for print operations.
 */
planck.core._STAR_err_STAR_ = (new planck.core.Writer(PLANCK_RAW_WRITE_STDERR,PLANCK_RAW_FLUSH_STDERR,null,null,null,null));
}
if(typeof planck.core._STAR_command_line_args_STAR_ !== 'undefined'){
} else {
/**
 * A sequence of the supplied command line arguments, or nil if none were supplied
 */
planck.core._STAR_command_line_args_STAR_ = cljs.core.seq.call(null,cljs.core.js__GT_clj.call(null,PLANCK_INITIAL_COMMAND_LINE_ARGS));
}
/**
 * A tree seq on PLKFiles
 */
planck.core.file_seq = (function planck$core$file_seq(dir){
return PLANCK_IO_FILESEQ(dir);
});
/**
 * Breaks an atom's value into two parts. The supplied function should
 * return a pair. The first element will be set to be the atom's new
 * value and the second element will be returned.
 */
planck.core.fission_BANG_ = (function planck$core$fission_BANG_(){
var args__11940__auto__ = [];
var len__11938__auto___46 = arguments.length;
var i__11939__auto___47 = 0;
while(true){
if((i__11939__auto___47 < len__11938__auto___46)){
args__11940__auto__.push((arguments[i__11939__auto___47]));

var G__48 = (i__11939__auto___47 + 1);
i__11939__auto___47 = G__48;
continue;
} else {
}
break;
}

var argseq__11941__auto__ = (((2 < args__11940__auto__.length))?(new cljs.core.IndexedSeq(args__11940__auto__.slice(2),0)):null);
return planck.core.fission_BANG_.cljs$core$IFn$_invoke$arity$variadic((arguments[0]),(arguments[1]),argseq__11941__auto__);
});

planck.core.fission_BANG_.cljs$core$IFn$_invoke$arity$variadic = (function (atom,f,args){
while(true){
var old = cljs.core.deref.call(null,atom);
var vec__45 = cljs.core.apply.call(null,f,old,args);
var new_in = cljs.core.nth.call(null,vec__45,0,null);
var new_out = cljs.core.nth.call(null,vec__45,1,null);
if(cljs.core.truth_(cljs.core.compare_and_set_BANG_.call(null,atom,old,new_in))){
return new_out;
} else {
continue;
}
break;
}
});

planck.core.fission_BANG_.cljs$lang$maxFixedArity = 2;

planck.core.fission_BANG_.cljs$lang$applyTo = (function (seq42){
var G__43 = cljs.core.first.call(null,seq42);
var seq42__$1 = cljs.core.next.call(null,seq42);
var G__44 = cljs.core.first.call(null,seq42__$1);
var seq42__$2 = cljs.core.next.call(null,seq42__$1);
return planck.core.fission_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__43,G__44,seq42__$2);
});
if(typeof planck.core.buffer !== 'undefined'){
} else {
planck.core.buffer = cljs.core.atom.call(null,null);
}
/**
 * Reads the next line from the current value of planck.io/*in*
 */
planck.core.read_line = (function planck$core$read_line(){
while(true){
var temp__10853__auto__ = cljs.core.deref.call(null,planck.core.buffer);
if(cljs.core.truth_(temp__10853__auto__)){
var buffered = temp__10853__auto__;
var n = buffered.indexOf("\n");
if((n < 0)){
var temp__10853__auto____$1 = planck.core._read.call(null,planck.core._STAR_in_STAR_);
if(cljs.core.truth_(temp__10853__auto____$1)){
var next_characters = temp__10853__auto____$1;
cljs.core.swap_BANG_.call(null,planck.core.buffer,((function (next_characters,temp__10853__auto____$1,n,buffered,temp__10853__auto__){
return (function (s){
return [cljs.core.str(s),cljs.core.str(next_characters)].join('');
});})(next_characters,temp__10853__auto____$1,n,buffered,temp__10853__auto__))
);

continue;
} else {
return planck.core.fission_BANG_.call(null,planck.core.buffer,((function (temp__10853__auto____$1,n,buffered,temp__10853__auto__){
return (function (s){
return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null,s], null);
});})(temp__10853__auto____$1,n,buffered,temp__10853__auto__))
);
}
} else {
return planck.core.fission_BANG_.call(null,planck.core.buffer,((function (n,buffered,temp__10853__auto__){
return (function (s){
return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var residual = cljs.core.subs.call(null,s,(n + 1));
if(cljs.core._EQ_.call(null,"",residual)){
return null;
} else {
return residual;
}
})(),cljs.core.subs.call(null,s,0,n)], null);
});})(n,buffered,temp__10853__auto__))
);
}
} else {
if(cljs.core.truth_(cljs.core.reset_BANG_.call(null,planck.core.buffer,planck.core._read.call(null,planck.core._STAR_in_STAR_)))){
continue;
} else {
return null;
}
}
break;
}
});
/**
 * Slurps a file
 */
planck.core.slurp = (function planck$core$slurp(filename){
var or__11080__auto__ = PLANCK_READ_FILE(filename);
if(cljs.core.truth_(or__11080__auto__)){
return or__11080__auto__;
} else {
throw (new Error(filename));
}
});
/**
 * Spits a file
 */
planck.core.spit = (function planck$core$spit(filename,content){
PLANCK_WRITE_FILE(filename,content);

return null;
});

Loading dependencies for cljs.user
Processing :use-macros for cljs.user
Processing :require-macros for cljs.user
Evaluating planck.core/*command-line-args*
planck.core._STAR_command_line_args_STAR_
