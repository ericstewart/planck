#!/usr/bin/env planck
(ns planck.int-tests
  (:require [planck.core :refer [exit]]
            [planck.shell :refer [sh *sh-dir*]]))

;; Perhaps this file can evolve to be more like
;; cljs.test, and perhaps it can involve multiple
;; namespaces, etc.
;;
;; For now, all you ned to do to cause the tests
;; to fail is call `(exit 1)`.

(def planck-exe "build/Release/planck")

(defn check-output
  [expected shell-output]
  (when-not (= expected (:out shell-output))
    (println "Expected:")
    (prn expected)
    (println "Actual:")
    (prn (:out shell-output))
    (exit 1)))

(check-output 
  "planck 1.5
Usage:  planck [init-opt*] [main-opt] [args]

  With no options or args, runs an interactive Read-Eval-Print Loop

  init options:
    -i, --init path     Load a file or resource
    -e, --eval string   Evaluate expressions in string; print non-nil values
    -s, --src  path     Use path for source. Default is \"src\"
    -j, --jar  path     Use path for a JAR dependency.
    -v, --verbose       Emit verbose diagnostic output.
    -d, --dumb-terminal Disables line editing / VT100 terminal control.

  main options:
    -m, --main ns-name  Call the -main function from a namespace with args
    -r, --repl          Run a repl
    path                Run a script from a file or resource
    -                   Run a script from standard input
    -h, -?, --help      Print this help message and exit
    -l, --legal         Show legal info (licenses and copyrights)

  operation:

    - Enters the cljs.user namespace
    - Binds *command-line-args* to a seq of strings containing command line
      args that appear after any main option
    - Runs all init options in order
    - Calls a -main function or runs a repl or script if requested

  The init options may be repeated and mixed freely, but must appear before
  any main option.

  Paths may be absolute or relative in the filesystem.\n\n"
  (sh planck-exe "-h"))

(defn ensure-output [expected quoted-commands]
  (check-output
    (prn-str expected)
    (apply sh planck-exe (interleave
                           (repeat "-e")
                           (map pr-str quoted-commands)))))

;; Ensure clojure.string loads
(ensure-output "foo quux baz"
  ['(require '[clojure.string :as s])
   '(s/replace "foo bar baz" #"bar" "quux")])

;; Ensure clojure.set loads
(ensure-output #{:b :d}
  ['(require '[clojure.set :as set])
   '(set/intersection #{:a :b :c :d} #{:b :d :e})])

;; Ensure clojure.walk loads
(ensure-output '(5 3 1)
  ['(require '[clojure.walk :refer [walk]])
   '(walk first reverse [ [1 2] [3 4] [5 6] ])])

;; Ensure cljs.pprint loads
(ensure-output "123,456,789"
  ['(require '[cljs.pprint :refer [cl-format]])
   '(cl-format nil "~:d" 123456789)])
