#!/bin/bash

source int-test/script/setup-env

echo "Help output"
$PLANCK -h

echo "Legal output"
$PLANCK -l

echo "Repeated ordered -e and -i, supressing nil"
$PLANCK -i $SRC/no-ns/foo.cljs -e ':a' -e 'nil' -i $SRC/no-ns/bar.cljs -e 2 -i $SRC/no-ns/foo.cljs

echo "Test :cljs/quit"
$PLANCK <<REPL_INPUT
1
:cljs/quit
2
REPL_INPUT

echo "Exit on first error"
$PLANCK -e'(println "ok")' -e'(throw (js/Error. "x"))' -e'(println "unreachable")'

echo "Test cope with syntax errors"
$PLANCK <<REPL_INPUT
34f
a:
REPL_INPUT

echo "Multi-line data"
$PLANCK <<REPL_INPUT
[1
2]
REPL_INPUT

echo "Multi-line string"
$PLANCK <<REPL_INPUT
"abc
def"
REPL_INPUT

echo "space before and after"
$PLANCK <<REPL_INPUT
 3 
REPL_INPUT

echo "Test print to stderr"
$PLANCK <<REPL_INPUT
(binding [*print-fn* *print-err-fn*]
  (println "hello stderr"))
REPL_INPUT

echo "Test main"
$PLANCK -s $SRC -m test-main.core 3 4
echo $?

echo "Test main zero"
$PLANCK -s $SRC -m test-main.zero
echo $?

echo "Test main one"
# Return value of main is _not_ the return value
$PLANCK -s $SRC -m test-main.one
echo $?

echo "Test main unhandled"
$PLANCK -s $SRC -m test-main.unhandled > /dev/null
echo $?

echo "Test main exit"
$PLANCK -s $SRC -m test-main.exit 
echo $?

echo "Test REPL exit"
$PLANCK <<REPL_INPUT
(require 'planck.core)
(planck.core/exit 118)
REPL_INPUT
echo $?

echo "Test call fn exit"
$PLANCK -s $SRC <<REPL_INPUT
(require 'test-exit.core)
(test-exit.core/please-exit 119)
REPL_INPUT
echo $?

echo "Test run file with exit"
$PLANCK $SRC/test_exit/exit_in_file.cljs
echo $?

echo "Test in-ns"
$PLANCK <<REPL_INPUT
(in-ns not-symbol)
(in-ns)
(in-ns 'alpha.beta)
(def x 3)
(in-ns (symbol "gamma.delta"))
(def y 4)
(ns test.core (:require [clojure.set :as set]))
(set/intersection #{:a :b} #{:a :c})
(in-ns 'cljs.user)
(in-ns 'test.core)
(set/intersection #{:a :b} #{:a :c})
REPL_INPUT

echo "Test require REPL special"
$PLANCK -s $SRC <<REPL_INPUT
(require 'test-require.core)
test-require.core/success
REPL_INPUT

echo "Test require REPL special exit in file"
$PLANCK -s $SRC <<REPL_INPUT
(require 'test-require.exit)
REPL_INPUT
echo $?

echo "Test require REPL special throws in file"
$PLANCK -s $SRC <<REPL_INPUT
(require 'test-require.throw-it)
REPL_INPUT
echo $?

echo "Test require unknown ns"
$PLANCK -s $SRC <<REPL_INPUT
(require 'unknown_ns.core)
REPL_INPUT

echo "Test require :reload"
mkdir -p /tmp/PLANCK_SRC/foo
$PLANCK -s /tmp/PLANCK_SRC <<REPL_INPUT
(require 'planck.io)
(planck.io/spit "/tmp/PLANCK_SRC/foo/bar.cljs" "(ns foo.bar)\n(def x :initial)")
(require 'foo.bar)
foo.bar/x
(planck.io/spit "/tmp/PLANCK_SRC/foo/bar.cljs" "(ns foo.bar)\n(def x :reloaded)")
(require 'foo.bar :reload)
foo.bar/x
REPL_INPUT

echo "Test require :reload in changing spec"
mkdir -p /tmp/PLANCK_SRC/foo
$PLANCK -s /tmp/PLANCK_SRC <<REPL_INPUT
(require 'planck.io)
(planck.io/spit "/tmp/PLANCK_SRC/foo/bar.cljs" "(ns foo.bar)\n(def x :initial)")
(require '[foo.bar :as baz])
baz/x
(planck.io/spit "/tmp/PLANCK_SRC/foo/bar.cljs" "(ns foo.bar)\n(def x :reloaded)")
(require '[foo.bar :as quux] :reload)
quux/x
REPL_INPUT

echo "Test require :reload-all"
mkdir -p /tmp/PLANCK_SRC/foo
$PLANCK -s /tmp/PLANCK_SRC <<REPL_INPUT
(require 'planck.io)
(planck.io/spit "/tmp/PLANCK_SRC/foo/bar.cljs" "(ns foo.bar)\n(def x :initial)")
(require 'foo.bar)
foo.bar/x
(planck.io/spit "/tmp/PLANCK_SRC/foo/bar.cljs" "(ns foo.bar)\n(def x :reloaded)")
(require 'foo.bar :reload-all)
foo.bar/x
REPL_INPUT

# Note, the output of this will change with #68 / CLJS-1417
echo "Test require-macros unknown ns"
$PLANCK -s $SRC <<REPL_INPUT
(require-macros 'unknown-ns.core)
REPL_INPUT

echo "Test require-macros REPL special"
$PLANCK -s $SRC <<REPL_INPUT
(require-macros 'test-require-macros.core)
(+ 3 (test-require-macros.core/str->int "2"))
REPL_INPUT

echo "Test in-ns REPL special"
$PLANCK <<REPL_INPUT
(in-ns 'foo.bar)
::a
REPL_INPUT

echo "Test doc REPL special"
$PLANCK <<REPL_INPUT
(doc inc)
#_(doc when) ; Doc for macros temporarily broken
(doc doc)
(defn f "docstring" [param])
(doc f)
REPL_INPUT

echo "Test pst REPL special"
$PLANCK <<REPL_INPUT
(defn f [] (throw (js/Error. "whoah")))
(defn g [] (throw (js/Error. "ouch")))
(f)
(pst)
(def e *e)
(g)
(pst)
(pst e)
REPL_INPUT

echo "Test load-file REPL special"
$PLANCK -s $SRC <<REPL_INPUT
(load-file "int-test/src/test_load_file/core.cljs")
test-load-file.core/success
REPL_INPUT

echo "Test doc support for load-file REPL special"
$PLANCK -s $SRC <<REPL_INPUT
(doc load-file)
REPL_INPUT

echo "Test load-file REPL bad filename"
$PLANCK -s $SRC <<REPL_INPUT
(load-file "int-test/src/test_load_file/nofile.cljs")
REPL_INPUT

echo "Test load-file REPL error in file"
$PLANCK -s $SRC <<REPL_INPUT
(load-file "int-test/src/test_load_file/error_in_file.cljs")
REPL_INPUT

echo "Test load-file REPL exit in file"
$PLANCK -s $SRC <<REPL_INPUT
(load-file "int-test/src/test_load_file/exit_in_file.cljs")
REPL_INPUT
echo $?

echo "Spit / slurp"
$PLANCK <<REPL_INPUT
(def test-file "/tmp/PLANCK_TEST.txt")
(require 'planck.io)
(defn test-spit-slurp [content]
  (planck.core/spit test-file content)
  (prn
    (= content
      (planck.core/slurp test-file))))
(test-spit-slurp "")
(test-spit-slurp "a")
(test-spit-slurp "a\n")
(test-spit-slurp "a\nb")
(test-spit-slurp "a\nb\n")
REPL_INPUT

echo "Shell"
$PLANCK <<REPL_INPUT
(require 'planck.shell)
(into (sorted-set) (planck.shell/sh "echo" "hello))
REPL_INPUT

echo "Shell stderr"
$PLANCK <<REPL_INPUT
(require 'planck.shell)
(into (sorted-set) (planck.shell/sh "$PLANCK" "-e" "(binding [*print-fn* *print-err-fn*] (println \"this is from stderr\"))"))
REPL_INPUT

echo "Coercions"
$PLANCK <<REPL_INPUT
(require 'planck.io)
(in-ns 'planck.io)
(as-file nil)
(as-file "abc")
(as-file (as-file "abc"))
(.-path (as-file "abc"))
REPL_INPUT

echo "reader and read-line"
$PLANCK <<REPL_INPUT
(require '[planck.core :refer [*in* -close spit read-line]] '[planck.io :refer [reader]])
(defn test-read [content]
  (spit "/tmp/PLANCK_TEST.txt" content)
  (let [rdr (reader "/tmp/PLANCK_TEST.txt")]
    (try
      (binding [*in* rdr]
        (prn (read-line))
        (prn (read-line))
        (prn (read-line)))
      (finally
        (-close rdr)))))
(test-read "")
(test-read "a")
(test-read "a")
(test-read "a\n")
(test-read "a\nb")
(test-read "a\nb\n")
REPL_INPUT

echo "writer"
$PLANCK <<REPL_INPUT
(require '[planck.core :refer [-close slurp spit]] '[planck.io :refer [reader writer]])
(defn test-write [content]
  (spit "/tmp/PLANCK_TEST.txt" content)
  (let [wtr (writer "/tmp/PLANCK_TEST.txt")]
    (try
      (-write wtr content)
      (finally
        (-close wtr))))
  (= content (slurp "/tmp/PLANCK_TEST.txt")))
(test-write "")
(test-write "a")
(test-write "a")
(test-write "a\n")
(test-write "a\nb")
(test-write "a\nb\n")
REPL_INPUT

echo "writer append"
$PLANCK <<REPL_INPUT
(require '[planck.core :refer [-close slurp spit]] '[planck.io :refer [reader writer]])
(defn test-write [previous-content content]
  (spit "/tmp/PLANCK_TEST.txt" previous-content)
  (let [wtr (writer "/tmp/PLANCK_TEST.txt" :append true)]
    (try
      (-write wtr content)
      (finally
        (-close wtr))))
  (= (str previous-content content) (slurp "/tmp/PLANCK_TEST.txt")))
(test-write "" "")
(test-write "" "a")
(test-write "" "a")
(test-write "" "a\n")
(test-write "" "a\nb")
(test-write "" "a\nb\n")
(test-write "x" "")
(test-write "x" "a")
(test-write "x" "a")
(test-write "x" "a\n")
(test-write "x" "a\nb")
(test-write "x" "a\nb\n")
(test-write "x\n" "")
(test-write "x\n" "a")
(test-write "x\n" "a")
(test-write "x\n" "a\n")
(test-write "x\n" "a\nb")
(test-write "x\n" "a\nb\n")
REPL_INPUT

echo "Test file-seq"
# The output should be depth-first, as below
mkdir /tmp/PLANCK_FILE_SEQ
mkdir /tmp/PLANCK_FILE_SEQ/A
mkdir /tmp/PLANCK_FILE_SEQ/A/B
touch /tmp/PLANCK_FILE_SEQ/A/B/E
touch /tmp/PLANCK_FILE_SEQ/A/B/F
mkdir /tmp/PLANCK_FILE_SEQ/A/C
touch /tmp/PLANCK_FILE_SEQ/A/C/G
touch /tmp/PLANCK_FILE_SEQ/A/D
$PLANCK <<REPL_INPUT
(require '[planck.core] '[planck.io])
(run! println (map (memfn path) (planck.core/file-seq (planck.io/file "/tmp/PLANCK_FILE_SEQ"))))
REPL_INPUT
rm -rf /tmp/PLANCK_FILE_SEQ

echo "Test Google Closure index"
$PLANCK <<REPL_INPUT
(ns foo.bar (:require clojure.string))
REPL_INPUT

echo "Test availability of goog libs"
$PLANCK <<REPL_INPUT
(require 'goog.date.Date)
(goog.date.Date. 2005 3 3)
REPL_INPUT

echo "Test empty list of *command-line-args*"
$PLANCK <<REPL_INPUT
(require 'planck.core)
planck.core/*command-line-args*
REPL_INPUT

echo "Test empty list of *command-line-args* following main opt"
$PLANCK -r <<REPL_INPUT
(require 'planck.core)
planck.core/*command-line-args*
REPL_INPUT

echo "Treat init opts that follow -r main opt as *command-line-args* instead of evaluating them"
$PLANCK -r -s src -e '(println "hi")' -v <<REPL_INPUT
(require 'planck.core)
planck.core/*command-line-args*
REPL_INPUT

echo "Treat init opts that follow nice -m ns-name as *command-line-args* instead of evaluating them"
$PLANCK -s $SRC -m test-main.args -v -e '(println "hi")'
echo $?

echo "Treat init opts that follow nice --main=ns-name as *command-line-args* instead of evaluating them"
$PLANCK -s $SRC --main=test-main.args -v -e '(println "hi")'
echo $?

echo "Treat init opts that follow less nice -mns-name as *command-line-args* instead of evaluating them"
$PLANCK -s $SRC -mtest-main.args -v -e '(println "hi")'
echo $?

echo "Treat main opts that follow a main opt as *command-line-args* instead of evaluating them"
$PLANCK -r - -m test-main.args -r <<REPL_INPUT
(require 'planck.core)
planck.core/*command-line-args*
REPL_INPUT

echo "Test *command-line-args* with nice clumped init opts"
$PLANCK -ve '(println "hi")' -r here are some args 2>/dev/null <<REPL_INPUT
(require 'planck.core)
planck.core/*command-line-args*
REPL_INPUT

echo "Test *command-line-args* with less nicely clumped init opts"
$PLANCK -ve'(println "hi")' -r here are some args 2>/dev/null <<REPL_INPUT
(require 'planck.core)
planck.core/*command-line-args*
REPL_INPUT

echo "Test binding of *command-line-args* in file run from command line"
$PLANCK $SRC/test_args/args_in_file.cljs here are some args
echo $?
