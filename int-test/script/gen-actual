#!/bin/bash

source int-test/script/setup-env

$PLANCK -e '(+ 1 1)'

echo "Repeated ordered -e and -i, supressing nil"
$PLANCK -i $SRC/no-ns/foo.cljs -e ':a' -e 'nil' -i $SRC/no-ns/bar.cljs -e 2 -i $SRC/no-ns/foo.cljs

echo "Test :cljs/quit"
$PLANCK -s $SRC <<REPL_INPUT
1
:cljs/quit
2
REPL_INPUT

echo "Test print to stderr"
$PLANCK -s $SRC <<REPL_INPUT
(binding [*print-fn* *print-err-fn*]
  (println "hello stderr"))
REPL_INPUT

echo "Test require REPL special"
$PLANCK -s $SRC <<REPL_INPUT
(require 'test-require.core)
test-require.core/success
REPL_INPUT

echo "Test require-macros REPL special"
$PLANCK -s $SRC <<REPL_INPUT
(require-macros 'test-require-macros.core)
(+ 3 (test-require-macros.core/str->int "2"))
REPL_INPUT

echo "Test in-ns REPL special"
$PLANCK -s $SRC <<REPL_INPUT
(in-ns 'foo.bar)
::a
REPL_INPUT

echo "Test doc REPL special"
$PLANCK -s $SRC <<REPL_INPUT
(doc inc)
(doc when)
(doc doc)
(defn f "docstring" [param])
(doc f)
REPL_INPUT

echo "Test pst REPL special"
$PLANCK -s $SRC <<REPL_INPUT
(defn f [] (throw (js/Error. "whoah")))
(defn g [] (throw (js/Error. "ouch")))
(f)
(pst)
(def e *e)
(g)
(pst)
(pst e)
REPL_INPUT
